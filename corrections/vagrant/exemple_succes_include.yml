---
# ============================================================================
# ‚úÖ EXEMPLE DE SUCC√àS AVEC include_tasks
# ============================================================================
# 
# Ce playbook va R√âUSSIR et montrer les avantages d'include_tasks
# 
# OBJECTIF P√âDAGOGIQUE :
# Montrer qu'on PEUT utiliser une variable d√©finie dynamiquement
# dans le nom du fichier avec include_tasks
#
# ============================================================================

- name: "‚úÖ D√âMONSTRATION : Succ√®s avec include_tasks"
  hosts: localhost
  connection: local
  gather_facts: yes

  tasks:
    - name: "√âtape 1 : Afficher le but de cette d√©mo"
      ansible.builtin.debug:
        msg: |
          üéì Cette d√©monstration va R√âUSSIR.
          
          OBJECTIF : Montrer qu'include_tasks PEUT utiliser 
          une variable d√©finie pendant l'ex√©cution.

    - name: "√âtape 2 : D√©finir le nom de fichier selon l'OS"
      ansible.builtin.set_fact:
        nom_fichier_os: "taches_{{ ansible_os_family | lower }}.yml"
      
    - name: "√âtape 3 : Afficher la variable calcul√©e"
      ansible.builtin.debug:
        msg: "Le fichier sera : {{ nom_fichier_os }}"

    - name: "√âtape 4 : Cr√©er un fichier temporaire de t√¢ches"
      ansible.builtin.copy:
        content: |
          ---
          - name: "T√¢che dynamique 1"
            ansible.builtin.debug:
              msg: "‚úÖ Cette t√¢che vient d'un fichier charg√© dynamiquement !"
          
          - name: "T√¢che dynamique 2"
            ansible.builtin.debug:
              msg: "üéØ Le fichier a √©t√© choisi selon l'OS : {{ ansible_os_family }}"
          
          - name: "T√¢che dynamique 3"
            ansible.builtin.debug:
              msg: "‚ö° include_tasks √©value les variables au RUN TIME"
        dest: "/tmp/taches_dynamiques.yml"

    # ‚úÖ‚úÖ‚úÖ CECI VA R√âUSSIR ‚úÖ‚úÖ‚úÖ
    - name: "√âtape 5 : ‚úÖ SUCC√àS - Include avec variable dynamique"
      ansible.builtin.include_tasks: "/tmp/taches_dynamiques.yml"
      # 
      # POURQUOI √áA MARCHE ?
      # include_tasks est √©valu√© au RUN TIME (pendant l'ex√©cution)
      # √Ä ce moment-l√†, toutes les variables sont d√©finies !

    - name: "√âtape 6 : D√©monstration avec boucle (impossible avec import)"
      ansible.builtin.debug:
        msg: "üîÑ On va maintenant faire une boucle (impossible avec import_tasks)"

    - name: "√âtape 7 : Cr√©er des fichiers pour la boucle"
      ansible.builtin.copy:
        content: |
          ---
          - name: "Configuration pour {{ env }}"
            ansible.builtin.debug:
              msg: "‚öôÔ∏è Configuration de l'environnement : {{ env }}"
        dest: "/tmp/config_{{ item }}.yml"
      loop:
        - dev
        - staging
        - prod
      loop_control:
        loop_var: env

    # ‚úÖ BOUCLE AVEC include_tasks : POSSIBLE
    - name: "√âtape 8 : ‚úÖ Boucler sur plusieurs includes"
      ansible.builtin.include_tasks: "/tmp/config_{{ item }}.yml"
      loop:
        - dev
        - staging
        - prod
      vars:
        env: "{{ item }}"

    - name: "√âtape 9 : Nettoyage des fichiers temporaires"
      ansible.builtin.file:
        path: "/tmp/{{ item }}"
        state: absent
      loop:
        - taches_dynamiques.yml
        - config_dev.yml
        - config_staging.yml
        - config_prod.yml

    - name: "√âtape 10 : Fin de la d√©monstration"
      ansible.builtin.debug:
        msg: |
          ‚úÖ SUCC√àS TOTAL !
          
          Vous avez vu :
          1. ‚úÖ Variable dynamique dans le nom de fichier
          2. ‚úÖ Boucle avec include_tasks
          3. ‚úÖ √âvaluation au run time
          
          Tout cela est IMPOSSIBLE avec import_tasks !

# ============================================================================
# EXPLICATION POUR L'√âL√àVE
# ============================================================================
#
# CHRONOLOGIE DU SUCC√àS :
# 
# 1. Ansible PARSE le playbook
#    ‚îú‚îÄ> Il voit include_tasks mais ne le r√©sout PAS encore
#    ‚îî‚îÄ> ‚úÖ Pas d'erreur, on continue
#
# 2. Ansible EX√âCUTE les t√¢ches dans l'ordre
#    ‚îú‚îÄ> set_fact d√©finit la variable
#    ‚îú‚îÄ> include_tasks est atteint
#    ‚îú‚îÄ> √Ä CE MOMENT, la variable est r√©solue
#    ‚îî‚îÄ> ‚úÖ Le fichier correct est charg√© et ex√©cut√©
#
# ============================================================================


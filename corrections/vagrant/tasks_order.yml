---
# ============================================================================
# PLAYBOOK P√âDAGOGIQUE : Ordre d'ex√©cution des t√¢ches dans Ansible
# ============================================================================
#
# Ce playbook d√©montre l'ordre exact d'ex√©cution des diff√©rents types de t√¢ches
# dans Ansible. Utilisez ce fichier pour comprendre la s√©quence compl√®te.
#
# ORDRE D'EX√âCUTION :
# 1. pre_tasks (avant tout)
# 2. pre_tasks handlers (si notifi√©s)
# 3. roles (dans l'ordre d√©fini)
# 4. tasks (t√¢ches principales)
# 5. handlers des tasks (si notifi√©s)
# 6. post_tasks (apr√®s tout)
# 7. post_tasks handlers (si notifi√©s)
# ============================================================================

- name: "D√©monstration de l'ordre d'ex√©cution des t√¢ches Ansible"
  hosts: localhost
  connection: local
  gather_facts: true

  # --------------------------------------------------------------------------
  # PRE_TASKS : S'ex√©cutent EN PREMIER, avant les roles et les tasks
  # --------------------------------------------------------------------------
  # Utilis√©s pour : pr√©paration de l'environnement, v√©rifications pr√©alables,
  # installation de d√©pendances critiques
  # --------------------------------------------------------------------------
  pre_tasks:
    - name: "PRE_TASK 1 : D√©but de l'ex√©cution"
      ansible.builtin.debug:
        msg: "üöÄ [√âTAPE 1] PRE_TASK - Premi√®re t√¢che ex√©cut√©e du playbook"

    - name: "PRE_TASK 2 : V√©rification de l'environnement"
      ansible.builtin.debug:
        msg: "üîç [√âTAPE 2] PRE_TASK - V√©rification de l'environnement"

    - name: "PRE_TASK 3 : Notification d'un handler pre_task"
      ansible.builtin.debug:
        msg: "üì¢ [√âTAPE 3] PRE_TASK - Cette t√¢che va notifier un handler pre_task"
      notify: handler_pre_task
      changed_when: true

    - name: "PRE_TASK 4 : Derni√®re pre_task"
      ansible.builtin.debug:
        msg: "‚úÖ [√âTAPE 4] PRE_TASK - Fin des pre_tasks"

  # --------------------------------------------------------------------------
  # ROLES : S'ex√©cutent APR√àS les pre_tasks
  # --------------------------------------------------------------------------
  # Note : Les roles sont d√©comment√©s ci-dessous pour la d√©monstration
  # Dans un vrai sc√©nario, ils s'ex√©cuteraient ici, entre pre_tasks et tasks
  # --------------------------------------------------------------------------
  # roles:
  #   - role: demo_role
  #     vars:
  #       role_message: "Les roles s'ex√©cutent ici, apr√®s pre_tasks"

  # --------------------------------------------------------------------------
  # TASKS : S'ex√©cutent APR√àS les pre_tasks (et les roles si d√©finis)
  # --------------------------------------------------------------------------
  # Ce sont les t√¢ches principales du playbook
  # --------------------------------------------------------------------------
  tasks:
    - name: "TASK 1 : D√©but des t√¢ches principales"
      ansible.builtin.debug:
        msg: "‚öôÔ∏è  [√âTAPE 5] TASK - D√©but des t√¢ches principales"

    - name: "TASK 2 : Traitement de donn√©es"
      ansible.builtin.debug:
        msg: "üíæ [√âTAPE 6] TASK - Traitement de donn√©es"

    - name: "TASK 3 : Notification d'un handler normal"
      ansible.builtin.debug:
        msg: "üì¢ [√âTAPE 7] TASK - Cette t√¢che va notifier un handler normal"
      notify: handler_principal
      changed_when: true

    - name: "TASK 4 : T√¢che avec condition"
      ansible.builtin.debug:
        msg: "üîÄ [√âTAPE 8] TASK - T√¢che conditionnelle (ex√©cut√©e)"
      when: true

    - name: "TASK 5 : Boucle sur plusieurs √©l√©ments"
      ansible.builtin.debug:
        msg: "üîÑ [√âTAPE 9.{{ item }}] TASK - Traitement de l'√©l√©ment {{ item }}"
      loop:
        - "A"
        - "B"
        - "C"

    - name: "TASK 6 : Notification de plusieurs handlers"
      ansible.builtin.debug:
        msg: "üì¢ [√âTAPE 10] TASK - Notification de plusieurs handlers"
      notify:
        - handler_principal
        - handler_secondaire
      changed_when: true

    - name: "TASK 7 : Fin des t√¢ches principales"
      ansible.builtin.debug:
        msg: "‚úÖ [√âTAPE 11] TASK - Fin des t√¢ches principales"

  # --------------------------------------------------------------------------
  # POST_TASKS : S'ex√©cutent APR√àS toutes les tasks (et leurs handlers)
  # --------------------------------------------------------------------------
  # Utilis√©s pour : nettoyage, notifications finales, v√©rifications post-d√©ploiement
  # --------------------------------------------------------------------------
  post_tasks:
    - name: "POST_TASK 1 : D√©but des post_tasks"
      ansible.builtin.debug:
        msg: "üèÅ [√âTAPE 14] POST_TASK - D√©but des t√¢ches de finalisation"

    - name: "POST_TASK 2 : V√©rification finale"
      ansible.builtin.debug:
        msg: "üîç [√âTAPE 15] POST_TASK - V√©rification post-d√©ploiement"

    - name: "POST_TASK 3 : Notification d'un handler post_task"
      ansible.builtin.debug:
        msg: "üì¢ [√âTAPE 16] POST_TASK - Notification d'un handler post_task"
      notify: handler_post_task
      changed_when: true

    - name: "POST_TASK 4 : Rapport final"
      ansible.builtin.debug:
        msg: "üìä [√âTAPE 17] POST_TASK - G√©n√©ration du rapport final"

  # --------------------------------------------------------------------------
  # HANDLERS : S'ex√©cutent √Ä LA FIN de chaque section (si notifi√©s)
  # --------------------------------------------------------------------------
  # Ordre :
  # - Handlers des pre_tasks ‚Üí apr√®s les pre_tasks
  # - Handlers des tasks ‚Üí apr√®s les tasks
  # - Handlers des post_tasks ‚Üí apr√®s les post_tasks
  #
  # IMPORTANT :
  # - Un handler ne s'ex√©cute qu'UNE SEULE FOIS m√™me s'il est notifi√© plusieurs fois
  # - Les handlers s'ex√©cutent dans l'ORDRE o√π ils sont D√âFINIS (pas notifi√©s)
  # - Utilisez 'meta: flush_handlers' pour forcer l'ex√©cution imm√©diate
  # --------------------------------------------------------------------------
  handlers:
    - name: handler_pre_task # noqa: name
      ansible.builtin.debug:
        msg: "üîî [√âTAPE 4.1] HANDLER PRE_TASK - Ex√©cut√© apr√®s les pre_tasks"

    - name: handler_secondaire # noqa: name
      ansible.builtin.debug:
        msg: "üîî [√âTAPE 13] HANDLER SECONDAIRE - Ex√©cut√© apr√®s handler_principal"

    - name: handler_principal # noqa: name
      ansible.builtin.debug:
        msg: "üîî [√âTAPE 12] HANDLER PRINCIPAL - Ex√©cut√© apr√®s les tasks (notifi√© 2 fois, n'ex√©cute qu'une fois)"

    - name: handler_post_task # noqa: name
      ansible.builtin.debug:
        msg: "üîî [√âTAPE 18] HANDLER POST_TASK - Dernier handler ex√©cut√©"
# ============================================================================
# R√âSUM√â DE L'ORDRE D'EX√âCUTION
# ============================================================================
#
# 1. PRE_TASKS (√©tapes 1-4)
#    ‚îî‚îÄ> HANDLERS des pre_tasks si notifi√©s (√©tape 4.1)
#
# 2. ROLES (si d√©finis)
#    ‚îî‚îÄ> HANDLERS des roles si notifi√©s
#
# 3. TASKS (√©tapes 5-11)
#    ‚îî‚îÄ> HANDLERS des tasks si notifi√©s (√©tapes 12-13)
#
# 4. POST_TASKS (√©tapes 14-17)
#    ‚îî‚îÄ> HANDLERS des post_tasks si notifi√©s (√©tape 18)
#
# ============================================================================
# ASTUCES P√âDAGOGIQUES
# ============================================================================
#
# 1. FORCER L'EX√âCUTION IMM√âDIATE DES HANDLERS :
#    - name: "Forcer l'ex√©cution des handlers maintenant"
#      meta: flush_handlers
#
# 2. ORDRE DES HANDLERS :
#    Les handlers s'ex√©cutent dans l'ordre o√π ils sont D√âFINIS dans la section
#    'handlers', PAS dans l'ordre o√π ils sont notifi√©s
#
# 3. HANDLER UNIQUE :
#    Un handler notifi√© plusieurs fois ne s'ex√©cute qu'une seule fois
#
# 4. √âCHEC ET HANDLERS :
#    Si une t√¢che √©choue, les handlers ne sont pas ex√©cut√©s
#    (sauf si --force-handlers est utilis√©)
#
# 5. IMPORT vs INCLUDE :
#    - import_tasks : statique, trait√© au parse time
#    - include_tasks : dynamique, trait√© au runtime
#
# ============================================================================
# EXERCICES POUR VOS √âL√àVES
# ============================================================================
#
# EXERCICE 1 : Ajouter un 'meta: flush_handlers' apr√®s TASK 3
#              Observer comment l'ordre change
#
# EXERCICE 2 : Cr√©er une t√¢che qui √©choue (fail module)
#              Observer que les handlers ne s'ex√©cutent pas
#
# EXERCICE 3 : Inverser l'ordre des handlers dans la section handlers
#              Observer que l'ordre d'ex√©cution change
#
# EXERCICE 4 : Cr√©er un role simple et l'int√©grer dans ce playbook
#              Observer o√π il s'ex√©cute dans la s√©quence
#
# ============================================================================

# EXEMPLE DE PLAYBOOK AVANC√â avec meta: flush_handlers
# D√©commentez cette section pour voir l'impact de flush_handlers

# - name: "D√©monstration avanc√©e : flush_handlers"
#   hosts: localhost
#   connection: local
#   gather_facts: no
#
#   tasks:
#     - name: "TASK A : Notifier un handler"
#       ansible.builtin.debug:
#         msg: "Notification du handler"
#       notify: mon_handler
#       changed_when: true
#
#     - name: "TASK B : Avant flush"
#       ansible.builtin.debug:
#         msg: "Avant le flush - le handler n'est pas encore ex√©cut√©"
#
#     - name: "Forcer l'ex√©cution imm√©diate des handlers"
#       meta: flush_handlers
#
#     - name: "TASK C : Apr√®s flush"
#       ansible.builtin.debug:
#         msg: "Apr√®s le flush - le handler a √©t√© ex√©cut√© imm√©diatement"
#
#   handlers:
#     - name: mon_handler
#       ansible.builtin.debug:
#         msg: "üîî HANDLER ex√©cut√© imm√©diatement gr√¢ce √† flush_handlers"

